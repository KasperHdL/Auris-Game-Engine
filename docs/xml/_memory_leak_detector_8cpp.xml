<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_memory_leak_detector_8cpp" kind="file" language="C++">
    <compoundname>MemoryLeakDetector.cpp</compoundname>
    <includes refid="_memory_leak_detector_8hpp" local="yes">Auris/Utilities/MemoryLeakDetector.hpp</includes>
    <incdepgraph>
      <node id="465">
        <label>Projects/GameEngine/Auris/src/Auris/Utilities/MemoryLeakDetector.cpp</label>
        <link refid="_memory_leak_detector_8cpp"/>
        <childnode refid="466" relation="include">
        </childnode>
      </node>
      <node id="467">
        <label>iostream</label>
      </node>
      <node id="466">
        <label>Auris/Utilities/MemoryLeakDetector.hpp</label>
        <link refid="_memory_leak_detector_8hpp"/>
        <childnode refid="467" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_memory_leak_detector_8hpp" kindref="compound">Auris/Utilities/MemoryLeakDetector.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_auris" kindref="compound">Auris</ref>;</highlight></codeline>
<codeline lineno="4" refid="class_auris_1_1_memory_leak_detector_a1fb75585369cacf4d9588ba4dd949f13_1a1fb75585369cacf4d9588ba4dd949f13" refkind="member"><highlight class="normal"><ref refid="class_auris_1_1_memory_leak_detector_a1fb75585369cacf4d9588ba4dd949f13_1a1fb75585369cacf4d9588ba4dd949f13" kindref="member">MemoryLeakDetector::MemoryLeakDetector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>_WIN32<sp/>//<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Total<sp/>virt.<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>memInfo.dwLength<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(MEMORYSTATUSEX);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>GlobalMemoryStatusEx(&amp;memInfo);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>totalVirtualMem<sp/>=<sp/>memInfo.ullTotalPageFile;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Virt.<sp/>mem.<sp/>in<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>virtualMemUsed<sp/>=<sp/>memInfo.ullTotalPageFile<sp/>-<sp/>memInfo.ullAvailPageFile;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Virt.<sp/>mem.<sp/>used<sp/>by<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>GetProcessMemoryInfo(GetCurrentProcess(),<sp/>(PROCESS_MEMORY_COUNTERS*)&amp;pmc,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pmc));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>virtualMemUsedByMe<sp/>=<sp/>pmc.PrivateUsage;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Total<sp/>phys.<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>totalPhysMem<sp/>=<sp/>memInfo.ullTotalPhys;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Phys.<sp/>mem.<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>physMemUsed<sp/>=<sp/>memInfo.ullTotalPhys<sp/>-<sp/>memInfo.ullAvailPhys;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Phys<sp/>mem.<sp/>used<sp/>by<sp/>this<sp/>process<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>physMemUsedByMe<sp/>=<sp/>pmc.WorkingSetSize;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CPU<sp/>currently<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>PdhOpenQuery(NULL,<sp/>NULL,<sp/>&amp;cpuQuery);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>PdhAddCounter(cpuQuery,<sp/></highlight><highlight class="stringliteral">&quot;\\Processor(_Total)\\%<sp/>Processor<sp/>Time&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;cpuTotal);<sp/></highlight><highlight class="comment">//note:<sp/>removed<sp/>&quot;L&quot;<sp/>before<sp/>second<sp/>argument<sp/>in<sp/>PdhAddCounter<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>PdhCollectQueryData(cpuQuery);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CPU<sp/>currently<sp/>used<sp/>by<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>GetSystemInfo(&amp;sysInfo);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>numProcessors<sp/>=<sp/>sysInfo.dwNumberOfProcessors;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>GetSystemTimeAsFileTime(&amp;ftime);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;lastCPU,<sp/>&amp;ftime,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FILETIME));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>GetCurrentProcess();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>GetProcessTimes(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>&amp;ftime,<sp/>&amp;ftime,<sp/>&amp;fsys,<sp/>&amp;fuser);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;lastSysCPU,<sp/>&amp;fsys,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FILETIME));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;lastUserCPU,<sp/>&amp;fuser,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FILETIME));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>__linux__<sp/>//<sp/>Linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>sysinfo(&amp;memInfo);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Total<sp/>virt.<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>totalVirtualMem<sp/>=<sp/>memInfo.totalram;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>other<sp/>values<sp/>in<sp/>next<sp/>statement<sp/>to<sp/>avoid<sp/>int<sp/>overflow<sp/>on<sp/>right<sp/>hand<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>totalVirtualMem<sp/>+=<sp/>memInfo.totalswap;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>totalVirtualMem<sp/>*=<sp/>memInfo.mem_unit;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Virt.<sp/>mem.<sp/>currently<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>virtualMemUsed<sp/>=<sp/>memInfo.totalram<sp/>-<sp/>memInfo.freeram;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>other<sp/>values<sp/>in<sp/>next<sp/>statement<sp/>to<sp/>avoid<sp/>int<sp/>overflow<sp/>on<sp/>right<sp/>hand<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>virtualMemUsed<sp/>+=<sp/>memInfo.totalswap<sp/>-<sp/>memInfo.freeswap;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>virtualMemUsed<sp/>*=<sp/>memInfo.mem_unit;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Total<sp/>phys.<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>totalPhysMem<sp/>=<sp/>memInfo.totalram;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Multiply<sp/>in<sp/>next<sp/>statement<sp/>to<sp/>avoid<sp/>int<sp/>overflow<sp/>on<sp/>right<sp/>hand<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>totalPhysMem<sp/>*=<sp/>memInfo.mem_unit;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Phys.<sp/>mem.<sp/>currently<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>physMemUsed<sp/>=<sp/>memInfo.totalram<sp/>-<sp/>memInfo.freeram;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Multiply<sp/>in<sp/>next<sp/>statement<sp/>to<sp/>avoid<sp/>int<sp/>overflow<sp/>on<sp/>right<sp/>hand<sp/>side...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>physMemUsed<sp/>*=<sp/>memInfo.mem_unit;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>__APPLE__<sp/>//<sp/>MAC<sp/>OS<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>virt.<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>statfs(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;stats))</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeSwap<sp/>=<sp/>(uint64_t)stats.f_bsize<sp/>*<sp/>stats.f_bfree;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>virt.<sp/>mem.<sp/>currently<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>xsw_usage<sp/>vmusage<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vmusage);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sysctlbyname(</highlight><highlight class="stringliteral">&quot;vm.swapusage&quot;</highlight><highlight class="normal">,<sp/>&amp;vmusage,<sp/>&amp;size,<sp/>NULL,<sp/>0)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>get<sp/>swap<sp/>usage<sp/>by<sp/>calling<sp/>sysctlbyname(\&quot;vm.swapusage\&quot;,...)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Virt.<sp/>and<sp/>phys.<sp/>mem.<sp/>used<sp/>by<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>t_info_count<sp/>=<sp/>TASK_BASIC_INFO_COUNT;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(KERN_SUCCESS<sp/>!=<sp/>task_info(mach_task_self(),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_BASIC_INFO,<sp/>(task_info_t)&amp;t_info,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;t_info_count))</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resident<sp/>size<sp/>is<sp/>in<sp/>t_info.resident_size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>virtual<sp/>size<sp/>is<sp/>in<sp/>t_info.virtual_size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>phys.<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>mib[0]<sp/>=<sp/>CTL_HW;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>mib[1]<sp/>=<sp/>HW_MEMSIZE;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>sysctl(mib,<sp/>2,<sp/>&amp;physical_memory,<sp/>&amp;length,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Unsupported<sp/>OS&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="class_auris_1_1_memory_leak_detector_a73b7c5eff1b7894973d777fb81434000_1a73b7c5eff1b7894973d777fb81434000" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a73b7c5eff1b7894973d777fb81434000_1a73b7c5eff1b7894973d777fb81434000" kindref="member">MemoryLeakDetector::leakDetect</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>virtVal<sp/>=<sp/><ref refid="class_auris_1_1_memory_leak_detector_a4e948bcedd82f887eb375787bef877e2_1a4e948bcedd82f887eb375787bef877e2" kindref="member">getVirtMemUsedByMe</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>physVal<sp/>=<sp/><ref refid="class_auris_1_1_memory_leak_detector_a7878ed0c41d428118e5a40b6062421a1_1a7878ed0c41d428118e5a40b6062421a1" kindref="member">getPhysMemUsedByMe</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(virtVal<sp/>&gt;<sp/><ref refid="class_auris_1_1_memory_leak_detector_a30996607eab293636a9a5028cf643962_1a30996607eab293636a9a5028cf643962" kindref="member">highWaterMarkVirt</ref>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_auris_1_1_memory_leak_detector_a25b8d96adee5cd5d75783d38d7e30f2d_1a25b8d96adee5cd5d75783d38d7e30f2d" kindref="member">virtRising</ref><sp/>&gt;<sp/>60.0)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Warning:<sp/>Memory<sp/>leak<sp/>-<sp/>make<sp/>sure<sp/>there<sp/>are<sp/>no<sp/>undeleted<sp/>pointers.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auris_1_1_memory_leak_detector_a30996607eab293636a9a5028cf643962_1a30996607eab293636a9a5028cf643962" kindref="member">highWaterMarkVirt</ref><sp/>=<sp/>virtVal;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auris_1_1_memory_leak_detector_a25b8d96adee5cd5d75783d38d7e30f2d_1a25b8d96adee5cd5d75783d38d7e30f2d" kindref="member">virtRising</ref><sp/>+=<sp/>deltaTime;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auris_1_1_memory_leak_detector_a25b8d96adee5cd5d75783d38d7e30f2d_1a25b8d96adee5cd5d75783d38d7e30f2d" kindref="member">virtRising</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(physVal<sp/>&gt;<sp/><ref refid="class_auris_1_1_memory_leak_detector_a6b4c1d19ec908784bdc1ae8dc83779fc_1a6b4c1d19ec908784bdc1ae8dc83779fc" kindref="member">highWaterMarkPhys</ref>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_auris_1_1_memory_leak_detector_a33f26fdb086c79ea4d212a3c88e399c5_1a33f26fdb086c79ea4d212a3c88e399c5" kindref="member">physRising</ref><sp/>&gt;<sp/>60.0)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Warning:<sp/>Memory<sp/>leak<sp/>-<sp/>make<sp/>sure<sp/>there<sp/>are<sp/>no<sp/>undeleted<sp/>pointers.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auris_1_1_memory_leak_detector_a6b4c1d19ec908784bdc1ae8dc83779fc_1a6b4c1d19ec908784bdc1ae8dc83779fc" kindref="member">highWaterMarkPhys</ref><sp/>=<sp/>physVal;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auris_1_1_memory_leak_detector_a33f26fdb086c79ea4d212a3c88e399c5_1a33f26fdb086c79ea4d212a3c88e399c5" kindref="member">physRising</ref><sp/>+=<sp/>deltaTime;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auris_1_1_memory_leak_detector_a33f26fdb086c79ea4d212a3c88e399c5_1a33f26fdb086c79ea4d212a3c88e399c5" kindref="member">physRising</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32<sp/>//<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a49c4331f6a68c0198f0a94b419212d61_1a49c4331f6a68c0198f0a94b419212d61" kindref="member">MemoryLeakDetector::getTotalVirtMem</ref>()<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>memInfo.dwLength<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(MEMORYSTATUSEX);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>GlobalMemoryStatusEx(&amp;memInfo);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>memInfo.ullTotalPageFile;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_aed75f81ee1bbae1467701bb3857c5e4e_1aed75f81ee1bbae1467701bb3857c5e4e" kindref="member">MemoryLeakDetector::getVirtMemUsed</ref>()<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>memInfo.ullTotalPageFile<sp/>-<sp/>memInfo.ullAvailPageFile;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a4e948bcedd82f887eb375787bef877e2_1a4e948bcedd82f887eb375787bef877e2" kindref="member">MemoryLeakDetector::getVirtMemUsedByMe</ref>()</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>GetProcessMemoryInfo(GetCurrentProcess(),<sp/>(PROCESS_MEMORY_COUNTERS*)&amp;pmc,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pmc));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmc.PrivateUsage<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a4b94e59c5062876fc8fa8eaea11eec12_1a4b94e59c5062876fc8fa8eaea11eec12" kindref="member">MemoryLeakDetector::getTotalPhysMem</ref>()</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memInfo.ullTotalPhys<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_af10c92f9fb06d2faecdd3dc9cfa5ad02_1af10c92f9fb06d2faecdd3dc9cfa5ad02" kindref="member">MemoryLeakDetector::getPhysMemUsed</ref>()</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memInfo.ullTotalPhys<sp/>-<sp/>memInfo.ullAvailPhys<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a7878ed0c41d428118e5a40b6062421a1_1a7878ed0c41d428118e5a40b6062421a1" kindref="member">MemoryLeakDetector::getPhysMemUsedByMe</ref>()</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmc.WorkingSetSize<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a0bc4479f1aec3bf9d17a7caaa1ad9781_1a0bc4479f1aec3bf9d17a7caaa1ad9781" kindref="member">MemoryLeakDetector::getCurrentTotalCPUValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>PDH_FMT_COUNTERVALUE<sp/>counterVal;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>PdhCollectQueryData(cpuQuery);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>PdhGetFormattedCounterValue(cpuTotal,<sp/>PDH_FMT_DOUBLE,<sp/>NULL,<sp/>&amp;counterVal);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counterVal.doubleValue;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_adf90e3006466df24745910badc7045b1_1adf90e3006466df24745910badc7045b1" kindref="member">MemoryLeakDetector::getCurrentProcessCPUValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>FILETIME<sp/>ftime,<sp/>fsys,<sp/>fuser;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>ULARGE_INTEGER<sp/>now,<sp/>sys,<sp/>user;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>percent;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>GetSystemTimeAsFileTime(&amp;ftime);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;now,<sp/>&amp;ftime,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FILETIME));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>GetProcessTimes(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>&amp;ftime,<sp/>&amp;ftime,<sp/>&amp;fsys,<sp/>&amp;fuser);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;sys,<sp/>&amp;fsys,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FILETIME));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;user,<sp/>&amp;fuser,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FILETIME));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>percent<sp/>=<sp/>(sys.QuadPart<sp/>-<sp/>lastSysCPU.QuadPart)<sp/>+<sp/>(user.QuadPart<sp/>-<sp/>lastUserCPU.QuadPart);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>percent<sp/>/=<sp/>(now.QuadPart<sp/>-<sp/>lastCPU.QuadPart);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>percent<sp/>/=<sp/>numProcessors;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>lastCPU<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>lastUserCPU<sp/>=<sp/>user;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSysCPU<sp/>=<sp/>sys;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>percent<sp/>*<sp/>100;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__linux__<sp/>//<sp/>Linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//Virt.<sp/>mem.<sp/>used<sp/>by<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MemoryLeakDetector::parseLine(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>assumes<sp/>that<sp/>a<sp/>digit<sp/>will<sp/>be<sp/>found<sp/>and<sp/>the<sp/>line<sp/>ends<sp/>in<sp/>&quot;Kb&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>strlen(line);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p<sp/>&lt;&apos;0&apos;<sp/>||<sp/>*p<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>p++;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>line[i<sp/>-<sp/>3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>atoi(p);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a49c4331f6a68c0198f0a94b419212d61_1a49c4331f6a68c0198f0a94b419212d61" kindref="member">MemoryLeakDetector::getTotalVirtMem</ref>()<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totalVirtualMem<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_aed75f81ee1bbae1467701bb3857c5e4e_1aed75f81ee1bbae1467701bb3857c5e4e" kindref="member">MemoryLeakDetector::getVirtMemUsed</ref>()<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>virtualMemUsed<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a4b94e59c5062876fc8fa8eaea11eec12_1a4b94e59c5062876fc8fa8eaea11eec12" kindref="member">MemoryLeakDetector::getTotalPhysMem</ref>()</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totalPhysMem<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_af10c92f9fb06d2faecdd3dc9cfa5ad02_1af10c92f9fb06d2faecdd3dc9cfa5ad02" kindref="member">MemoryLeakDetector::getPhysMemUsed</ref>()</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>physMemUsed<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a4e948bcedd82f887eb375787bef877e2_1a4e948bcedd82f887eb375787bef877e2" kindref="member">MemoryLeakDetector::getVirtMemUsedByMe</ref>()<sp/>{<sp/></highlight><highlight class="comment">//Note:<sp/>this<sp/>value<sp/>is<sp/>in<sp/>KB!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;/proc/self/status&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[128];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(line,<sp/>128,<sp/>file)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(line,<sp/></highlight><highlight class="stringliteral">&quot;VmSize:&quot;</highlight><highlight class="normal">,<sp/>7)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>parseLine(line);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//Phys.<sp/>mem.<sp/>used<sp/>by<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a7878ed0c41d428118e5a40b6062421a1_1a7878ed0c41d428118e5a40b6062421a1" kindref="member">MemoryLeakDetector::getPhysMemUsedByMe</ref>()<sp/>{<sp/></highlight><highlight class="comment">//Note:<sp/>this<sp/>value<sp/>is<sp/>in<sp/>KB!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;/proc/self/status&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[128];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(line,<sp/>128,<sp/>file)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(line,<sp/></highlight><highlight class="stringliteral">&quot;VmRSS:&quot;</highlight><highlight class="normal">,<sp/>6)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>parseLine(line);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>/<sp/><ref refid="namespace_auris_a0e5de4a121d48b7b72da65c9443f651a_1a0e5de4a121d48b7b72da65c9443f651a" kindref="member">MB_DIVIDER</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CPU<sp/>currently<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemoryLeakDetector::initTotalCPUFile()<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;/proc/stat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>fscanf(file,<sp/></highlight><highlight class="stringliteral">&quot;cpu<sp/>%llu<sp/>%llu<sp/>%llu<sp/>%llu&quot;</highlight><highlight class="normal">,<sp/>&amp;lastTotalUser,<sp/>&amp;lastTotalUserLow,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;lastTotalSys,<sp/>&amp;lastTotalIdle);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_a0bc4479f1aec3bf9d17a7caaa1ad9781_1a0bc4479f1aec3bf9d17a7caaa1ad9781" kindref="member">MemoryLeakDetector::getCurrentTotalCPUValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>percent;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>totalUser,<sp/>totalUserLow,<sp/>totalSys,<sp/>totalIdle,<sp/>total;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;/proc/stat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>fscanf(file,<sp/></highlight><highlight class="stringliteral">&quot;cpu<sp/>%llu<sp/>%llu<sp/>%llu<sp/>%llu&quot;</highlight><highlight class="normal">,<sp/>&amp;totalUser,<sp/>&amp;totalUserLow,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;totalSys,<sp/>&amp;totalIdle);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(totalUser<sp/>&lt;<sp/>lastTotalUser<sp/>||<sp/>totalUserLow<sp/>&lt;<sp/>lastTotalUserLow<sp/>||</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSys<sp/>&lt;<sp/>lastTotalSys<sp/>||<sp/>totalIdle<sp/>&lt;<sp/>lastTotalIdle)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Overflow<sp/>detection.<sp/>Just<sp/>skip<sp/>this<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>=<sp/>(totalUser<sp/>-<sp/>lastTotalUser)<sp/>+<sp/>(totalUserLow<sp/>-<sp/>lastTotalUserLow)<sp/>+</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(totalSys<sp/>-<sp/>lastTotalSys);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>=<sp/>total;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>(totalIdle<sp/>-<sp/>lastTotalIdle);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>/=<sp/>total;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>*=<sp/>100;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>lastTotalUser<sp/>=<sp/>totalUser;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>lastTotalUserLow<sp/>=<sp/>totalUserLow;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>lastTotalSys<sp/>=<sp/>totalSys;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>lastTotalIdle<sp/>=<sp/>totalIdle;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>percent;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CPU<sp/>used<sp/>by<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemoryLeakDetector::initCurrentCPUFile()<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tms<sp/>timeSample;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[128];</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>lastCPU<sp/>=<sp/>times(&amp;timeSample);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSysCPU<sp/>=<sp/>timeSample.tms_stime;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>lastUserCPU<sp/>=<sp/>timeSample.tms_utime;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;/proc/cpuinfo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>numProcessors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(line,<sp/>128,<sp/>file)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(line,<sp/></highlight><highlight class="stringliteral">&quot;processor&quot;</highlight><highlight class="normal">,<sp/>9)<sp/>==<sp/>0)<sp/>numProcessors++;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_memory_leak_detector_adf90e3006466df24745910badc7045b1_1adf90e3006466df24745910badc7045b1" kindref="member">MemoryLeakDetector::getCurrentProcessCPUValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tms<sp/>timeSample;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_t<sp/>now;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>percent;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>=<sp/>times(&amp;timeSample);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>&lt;=<sp/>lastCPU<sp/>||<sp/>timeSample.tms_stime<sp/>&lt;<sp/>lastSysCPU<sp/>||</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeSample.tms_utime<sp/>&lt;<sp/>lastUserCPU)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Overflow<sp/>detection.<sp/>Just<sp/>skip<sp/>this<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>=<sp/>(timeSample.tms_stime<sp/>-<sp/>lastSysCPU)<sp/>+</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(timeSample.tms_utime<sp/>-<sp/>lastUserCPU);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>/=<sp/>(now<sp/>-<sp/>lastCPU);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>/=<sp/>numProcessors;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>*=<sp/>100;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>lastCPU<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSysCPU<sp/>=<sp/>timeSample.tms_stime;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>lastUserCPU<sp/>=<sp/>timeSample.tms_utime;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>percent;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__APPLE__<sp/>//<sp/>MAC<sp/>OS<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Phys.<sp/>mem.<sp/>currently<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MemoryLeakDetector::getCurrentPhysMem(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>vm_size_t<sp/>page_size;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>mach_port_t<sp/>mach_port;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>mach_msg_type_number_t<sp/>count;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>vm_statistics64_data_t<sp/>vm_stats;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>mach_port<sp/>=<sp/>mach_host_self();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vm_stats)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(natural_t);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(KERN_SUCCESS<sp/>==<sp/>host_page_size(mach_port,<sp/>&amp;page_size)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KERN_SUCCESS<sp/>==<sp/>host_statistics64(mach_port,<sp/>HOST_VM_INFO,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(host_info64_t)&amp;vm_stats,<sp/>&amp;count))</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>free_memory<sp/>=<sp/>(int64_t)vm_stats.free_count<sp/>*<sp/>(int64_t)page_size;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>used_memory<sp/>=<sp/>((int64_t)vm_stats.active_count<sp/>+</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int64_t)vm_stats.inactive_count<sp/>+</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int64_t)vm_stats.wire_count)<sp/>*<sp/><sp/>(int64_t)page_size;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;free<sp/>memory:<sp/>%lld\nused<sp/>memory:<sp/>%lld\n&quot;</highlight><highlight class="normal">,<sp/>free_memory,<sp/>used_memory);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Unsupported<sp/>OS&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="Projects/GameEngine/Auris/src/Auris/Utilities/MemoryLeakDetector.cpp"/>
  </compounddef>
</doxygen>
