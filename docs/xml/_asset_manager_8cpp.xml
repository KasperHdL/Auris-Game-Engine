<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_asset_manager_8cpp" kind="file" language="C++">
    <compoundname>AssetManager.cpp</compoundname>
    <includes refid="_asset_manager_8hpp" local="yes">Auris/Utilities/AssetManager.hpp</includes>
    <incdepgraph>
      <node id="443">
        <label>Auris/Constants.hpp</label>
        <link refid="_constants_8hpp"/>
      </node>
      <node id="456">
        <label>limits</label>
      </node>
      <node id="455">
        <label>iterator</label>
      </node>
      <node id="463">
        <label>SDL.h</label>
      </node>
      <node id="434">
        <label>SRE/Texture.hpp</label>
      </node>
      <node id="440">
        <label>Auris/Entities/Nuggets/Sprite.hpp</label>
        <link refid="_sprite_8hpp"/>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="443" relation="include">
        </childnode>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
      </node>
      <node id="457">
        <label>stdexcept</label>
      </node>
      <node id="439">
        <label>SRE/Mesh.hpp</label>
      </node>
      <node id="436">
        <label>string</label>
      </node>
      <node id="437">
        <label>map</label>
      </node>
      <node id="462">
        <label>fstream</label>
      </node>
      <node id="449">
        <label>Auris/Utilities/picojson.h</label>
        <link refid="picojson_8h"/>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="461" relation="include">
        </childnode>
      </node>
      <node id="451">
        <label>cstdio</label>
      </node>
      <node id="445">
        <label>SRE/Shader.hpp</label>
      </node>
      <node id="458">
        <label>vector</label>
      </node>
      <node id="432">
        <label>Projects/GameEngine/Auris/src/Auris/Utilities/AssetManager.cpp</label>
        <link refid="_asset_manager_8cpp"/>
        <childnode refid="433" relation="include">
        </childnode>
      </node>
      <node id="459">
        <label>utility</label>
      </node>
      <node id="435">
        <label>Auris/Utilities/SpriteSheet.hpp</label>
        <link refid="_sprite_sheet_8hpp"/>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
      </node>
      <node id="460">
        <label>math.h</label>
      </node>
      <node id="447">
        <label>Auris/Entities/Nuggets/Material.hpp</label>
        <link refid="_material_8hpp"/>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
      </node>
      <node id="452">
        <label>cstdlib</label>
      </node>
      <node id="444">
        <label>Auris/Utilities/Shader.hpp</label>
        <link refid="_shader_8hpp"/>
        <childnode refid="445" relation="include">
        </childnode>
      </node>
      <node id="448">
        <label>iostream</label>
      </node>
      <node id="454">
        <label>cstddef</label>
      </node>
      <node id="446">
        <label>Auris/Entities/Nugget.hpp</label>
        <link refid="_nugget_8hpp"/>
      </node>
      <node id="433">
        <label>Auris/Utilities/AssetManager.hpp</label>
        <link refid="_asset_manager_8hpp"/>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="463" relation="include">
        </childnode>
      </node>
      <node id="450">
        <label>algorithm</label>
      </node>
      <node id="438">
        <label>Auris/Utilities/Mesh.hpp</label>
        <link refid="_mesh_8hpp"/>
        <childnode refid="439" relation="include">
        </childnode>
      </node>
      <node id="453">
        <label>cstring</label>
      </node>
      <node id="461">
        <label>locale.h</label>
      </node>
      <node id="442">
        <label>SRE/SimpleRenderEngine.hpp</label>
      </node>
      <node id="441">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_auris">Auris</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_asset_manager_8hpp" kindref="compound">Auris/Utilities/AssetManager.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_auris" kindref="compound">Auris</ref>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">std::map&lt;std::string,<sp/>SRE::Texture*&gt;<sp/><ref refid="class_auris_1_1_asset_manager_ac47cbdd59e8523b07f9671b3dbafc02a_1ac47cbdd59e8523b07f9671b3dbafc02a" kindref="member">AssetManager::textures</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal">std::map&lt;std::string,<sp/>SpriteSheet*&gt;<sp/><ref refid="class_auris_1_1_asset_manager_a4000c6c36f36f65b1c482197f41428b1_1a4000c6c36f36f65b1c482197f41428b1" kindref="member">AssetManager::spritesheets</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">std::map&lt;std::string,<sp/>Mix_Music*&gt;<sp/><ref refid="class_auris_1_1_asset_manager_a46b740352276485cad9ba3fe45bcc883_1a46b740352276485cad9ba3fe45bcc883" kindref="member">AssetManager::music</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">std::map&lt;std::string,<sp/>Mix_Chunk*&gt;<sp/><ref refid="class_auris_1_1_asset_manager_afb15d7b3bab17597791c02bb7d821003_1afb15d7b3bab17597791c02bb7d821003" kindref="member">AssetManager::sounds</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">/////////</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight><highlight class="comment">//<sp/>Get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_auris_1_1_asset_manager_a595b95ace9ae5f2828edf0d981af6ba5_1a595b95ace9ae5f2828edf0d981af6ba5" refkind="member"><highlight class="normal">SRE::Texture*<sp/><ref refid="class_auris_1_1_asset_manager_a595b95ace9ae5f2828edf0d981af6ba5_1a595b95ace9ae5f2828edf0d981af6ba5" kindref="member">AssetManager::getTexture</ref>(std::string<sp/>filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>filterSampling){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(AssetManager::textures[filename]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetManager::textures[filename]<sp/>=<sp/>SRE::Texture::createFromFile(<ref refid="class_auris_1_1_asset_manager_a8bde2869efc39bb0f4a0e85004780c4c_1a8bde2869efc39bb0f4a0e85004780c4c" kindref="member">getDataPath</ref>(filename).c_str(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetManager::textures[filename]-&gt;setFilterSampling(filterSampling);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssetManager::textures[filename];</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="class_auris_1_1_asset_manager_a74d949aa60184a06851621995586fa2a_1a74d949aa60184a06851621995586fa2a" refkind="member"><highlight class="normal"><ref refid="class_auris_1_1_sprite_sheet" kindref="compound">SpriteSheet</ref>*<sp/><ref refid="class_auris_1_1_asset_manager_a74d949aa60184a06851621995586fa2a_1a74d949aa60184a06851621995586fa2a" kindref="member">AssetManager::getSpriteSheet</ref>(std::string<sp/>jsonFilename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>createFlipped,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>filterSampling){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(AssetManager::spritesheets[jsonFilename]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetManager::spritesheets[jsonFilename]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_sprite_sheet" kindref="compound">SpriteSheet</ref>();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auris_1_1_asset_manager_a7cfd748a5d960ef106d48be8c5c7f5fe_1a7cfd748a5d960ef106d48be8c5c7f5fe" kindref="member">AssetManager::createSheet</ref>(AssetManager::spritesheets[jsonFilename],<sp/>jsonFilename,<sp/>createFlipped,<sp/>filterSampling);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssetManager::spritesheets[jsonFilename];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="class_auris_1_1_asset_manager_a6401ef4abb8770223df38efc533bfcba_1a6401ef4abb8770223df38efc533bfcba" refkind="member"><highlight class="normal">Mix_Music*<sp/><ref refid="class_auris_1_1_asset_manager_a6401ef4abb8770223df38efc533bfcba_1a6401ef4abb8770223df38efc533bfcba" kindref="member">AssetManager::getMusic</ref>(std::string<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(AssetManager::music[filename]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetManager::music[filename]<sp/>=<sp/>Mix_LoadMUS(<ref refid="class_auris_1_1_asset_manager_a8bde2869efc39bb0f4a0e85004780c4c_1a8bde2869efc39bb0f4a0e85004780c4c" kindref="member">AssetManager::getDataPath</ref>(filename).c_str());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AssetManager::music[filename]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nullptr:<sp/>Failed<sp/>to<sp/>load<sp/>Music<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.<sp/>Make<sp/>sure<sp/>the<sp/>filename<sp/>is<sp/>correct<sp/>and<sp/>that<sp/>the<sp/>file<sp/>is<sp/>placed<sp/>in<sp/>the<sp/>data<sp/>folder.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssetManager::music[filename];</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="class_auris_1_1_asset_manager_aa417ba9bbbdf2c675e03aa51a22d5c36_1aa417ba9bbbdf2c675e03aa51a22d5c36" refkind="member"><highlight class="normal">Mix_Chunk*<sp/><ref refid="class_auris_1_1_asset_manager_aa417ba9bbbdf2c675e03aa51a22d5c36_1aa417ba9bbbdf2c675e03aa51a22d5c36" kindref="member">AssetManager::getSound</ref>(std::string<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(AssetManager::sounds[filename]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>path<sp/>=<sp/><ref refid="class_auris_1_1_asset_manager_a8bde2869efc39bb0f4a0e85004780c4c_1a8bde2869efc39bb0f4a0e85004780c4c" kindref="member">AssetManager::getDataPath</ref>(filename);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssetManager::sounds[filename]<sp/>=<sp/>Mix_LoadWAV(path.c_str());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AssetManager::sounds[filename]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nullptr:<sp/>Failed<sp/>to<sp/>load<sp/>Sound<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.<sp/>Make<sp/>sure<sp/>the<sp/>filename<sp/>is<sp/>correct<sp/>and<sp/>that<sp/>the<sp/>file<sp/>is<sp/>placed<sp/>in<sp/>the<sp/>data<sp/>folder.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssetManager::sounds[filename];</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">///////////////////</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight><highlight class="comment">//<sp/>Private<sp/>Methods</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">///////////////////</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_auris_1_1_asset_manager_a7cfd748a5d960ef106d48be8c5c7f5fe_1a7cfd748a5d960ef106d48be8c5c7f5fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_asset_manager_a7cfd748a5d960ef106d48be8c5c7f5fe_1a7cfd748a5d960ef106d48be8c5c7f5fe" kindref="member">AssetManager::createSheet</ref>(<ref refid="class_auris_1_1_sprite_sheet" kindref="compound">SpriteSheet</ref>*<sp/>sheet,<sp/>std::string<sp/>jsonFilename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>createFlipped,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>filterSampling){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invertY<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpicojson_1_1value" kindref="compound">picojson::value</ref><sp/>v;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>t(<ref refid="class_auris_1_1_asset_manager_a8bde2869efc39bb0f4a0e85004780c4c_1a8bde2869efc39bb0f4a0e85004780c4c" kindref="member">AssetManager::getDataPath</ref>(jsonFilename).c_str());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&gt;&gt;<sp/>v;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>err<sp/>=<sp/><ref refid="namespacepicojson_a1ba78f161e46341e0c2fd705ff8b0210_1a1ba78f161e46341e0c2fd705ff8b0210" kindref="member">picojson::get_last_error</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(err<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>err<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepicojson_ac1e72166adfe3d96dc58cddc7ebd536a_1ac1e72166adfe3d96dc58cddc7ebd536a" kindref="member">picojson::array</ref><sp/>arr<sp/>=<sp/>v.get(</highlight><highlight class="stringliteral">&quot;frames&quot;</highlight><highlight class="normal">).get&lt;<ref refid="namespacepicojson_ac1e72166adfe3d96dc58cddc7ebd536a_1ac1e72166adfe3d96dc58cddc7ebd536a" kindref="member">picojson::array</ref>&gt;();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpicojson_1_1value_a7d7da11d54d7b983a902d28367bda9c1_1a7d7da11d54d7b983a902d28367bda9c1" kindref="member">picojson::value::object</ref><sp/>meta<sp/>=<sp/>v.get(</highlight><highlight class="stringliteral">&quot;meta&quot;</highlight><highlight class="normal">).get&lt;<ref refid="classpicojson_1_1value_a7d7da11d54d7b983a902d28367bda9c1_1a7d7da11d54d7b983a902d28367bda9c1" kindref="member">picojson::value::object</ref>&gt;();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>stuff<sp/>:<sp/>meta){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stuff.first==</highlight><highlight class="stringliteral">&quot;image&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_aca13e24dd6ec02dab5185938c2fe0200_1aca13e24dd6ec02dab5185938c2fe0200" kindref="member">texture</ref><sp/>=<sp/><ref refid="class_auris_1_1_asset_manager_a595b95ace9ae5f2828edf0d981af6ba5_1a595b95ace9ae5f2828edf0d981af6ba5" kindref="member">getTexture</ref>(stuff.second.get&lt;std::string&gt;(),<sp/>filterSampling);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stuff.first==</highlight><highlight class="stringliteral">&quot;normal&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_a8a653eddf6cfef5c61e6a6be483af018_1a8a653eddf6cfef5c61e6a6be483af018" kindref="member">normalMap</ref><sp/>=<sp/><ref refid="class_auris_1_1_asset_manager_a595b95ace9ae5f2828edf0d981af6ba5_1a595b95ace9ae5f2828edf0d981af6ba5" kindref="member">getTexture</ref>(stuff.second.get&lt;std::string&gt;(),<sp/>filterSampling);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>element<sp/>:<sp/>arr){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flip<sp/>=<sp/>0;flip<sp/>&lt;<sp/>(createFlipped<sp/>?<sp/>2:1);flip++){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(int)element.get(</highlight><highlight class="stringliteral">&quot;frame&quot;</highlight><highlight class="normal">).get(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>(int)element.get(</highlight><highlight class="stringliteral">&quot;frame&quot;</highlight><highlight class="normal">).get(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_auris_1_1_constants_abb26e3b2db53291f1b7649cb92b309e5_1abb26e3b2db53291f1b7649cb92b309e5" kindref="member">width</ref><sp/>=<sp/>(int)element.get(</highlight><highlight class="stringliteral">&quot;frame&quot;</highlight><highlight class="normal">).get(</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_auris_1_1_constants_ab1f513ab0d733d7c9af6299344630187_1ab1f513ab0d733d7c9af6299344630187" kindref="member">height</ref><sp/>=<sp/>(int)element.get(</highlight><highlight class="stringliteral">&quot;frame&quot;</highlight><highlight class="normal">).get(</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ax<sp/>=<sp/>(float)element.get(</highlight><highlight class="stringliteral">&quot;pivot&quot;</highlight><highlight class="normal">).get(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ay<sp/>=<sp/>(float)element.get(</highlight><highlight class="stringliteral">&quot;pivot&quot;</highlight><highlight class="normal">).get(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>element.get(</highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal">).get&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_aca13e24dd6ec02dab5185938c2fe0200_1aca13e24dd6ec02dab5185938c2fe0200" kindref="member">texture</ref>-&gt;getHeight()<sp/>-<sp/>height<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offsetX<sp/>=<sp/>(float)-width<sp/>*<sp/>ax;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offsetY<sp/>=<sp/>(float)-height<sp/>*<sp/>ay;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec3&gt;<sp/>vertices({</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3{<sp/>width<sp/>+<sp/>offsetX,<sp/>offsetY,<sp/>0<sp/>},<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3{<sp/>width<sp/>+<sp/>offsetX,<sp/>height<sp/>+<sp/>offsetY,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3{<sp/>offsetX,<sp/>offsetY,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3{<sp/>offsetX,<sp/>offsetY,<sp/>0<sp/>},<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3{<sp/>width<sp/>+<sp/>offsetX,<sp/>height<sp/>+<sp/>offsetY,<sp/>0<sp/>},<sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3{<sp/>offsetX,<sp/>height<sp/>+<sp/>offsetY,<sp/>0<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Per<sp/>pixel<sp/>normals<sp/>are<sp/>used<sp/>for<sp/>2D<sp/>graphics,<sp/>but<sp/>the<sp/>mesh<sp/>still<sp/>needs<sp/>an<sp/>empty<sp/>normal<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec3&gt;<sp/>normals;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UVs<sp/>contains<sp/>the<sp/>normalized<sp/>texture<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>uvx1<sp/>=<sp/>(float)x<sp/>/<sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_aca13e24dd6ec02dab5185938c2fe0200_1aca13e24dd6ec02dab5185938c2fe0200" kindref="member">texture</ref>-&gt;getWidth();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>uvy1<sp/>=<sp/>(float)y<sp/>/<sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_aca13e24dd6ec02dab5185938c2fe0200_1aca13e24dd6ec02dab5185938c2fe0200" kindref="member">texture</ref>-&gt;getHeight();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>uvx2<sp/>=<sp/>((float)(x<sp/>+<sp/>width))<sp/>/<sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_aca13e24dd6ec02dab5185938c2fe0200_1aca13e24dd6ec02dab5185938c2fe0200" kindref="member">texture</ref>-&gt;getWidth();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>uvy2<sp/>=<sp/>((float)(y<sp/>+<sp/>height))<sp/>/<sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_aca13e24dd6ec02dab5185938c2fe0200_1aca13e24dd6ec02dab5185938c2fe0200" kindref="member">texture</ref>-&gt;getHeight();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec2&gt;<sp/>uvs({</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec2{<sp/>uvx2,<sp/>uvy1<sp/>},<sp/>glm::vec2{<sp/>uvx2,<sp/>uvy2<sp/>},<sp/>glm::vec2{<sp/>uvx1,<sp/>uvy1<sp/>},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec2{<sp/>uvx1,<sp/>uvy1<sp/>},<sp/>glm::vec2{<sp/>uvx2,<sp/>uvy2<sp/>},<sp/>glm::vec2{<sp/>uvx1,<sp/>uvy2<sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flip<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_a1d691d3f0af24b1286882d3709957cbe_1a1d691d3f0af24b1286882d3709957cbe" kindref="member">meshes</ref>[name]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_mesh" kindref="compound">Mesh</ref>(vertices,<sp/>normals,<sp/>uvs,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sheet-&gt;<ref refid="class_auris_1_1_sprite_sheet_a1d691d3f0af24b1286882d3709957cbe_1a1d691d3f0af24b1286882d3709957cbe" kindref="member">meshes</ref>[</highlight><highlight class="stringliteral">&quot;flipped_&quot;</highlight><highlight class="normal"><sp/>+<sp/>name]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_auris_1_1_mesh" kindref="compound">Mesh</ref>(vertices,<sp/>normals,<sp/>{uvs[2],uvs[5],uvs[0],uvs[0],uvs[5],uvs[1]},<sp/><ref refid="namespace_auris_1_1_constants_abb26e3b2db53291f1b7649cb92b309e5_1abb26e3b2db53291f1b7649cb92b309e5" kindref="member">width</ref>,<sp/><ref refid="namespace_auris_1_1_constants_ab1f513ab0d733d7c9af6299344630187_1ab1f513ab0d733d7c9af6299344630187" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Projects/GameEngine/Auris/src/Auris/Utilities/AssetManager.cpp"/>
  </compounddef>
</doxygen>
